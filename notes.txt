Some options for styling React components
In this module, we will look at a few of the more popular ways to style React components:

1. Imported CSS Stylesheets: This is the approach that Vite uses with its <App> component by default. Each component has a designated CSS file.

2. Inline Styling: This approach uses the style prop.

3. Styled Components: Requires a package: npm install styled-components.

In their own words, Styled-Components “Utilizes tagged template literals (a recent addition to JavaScript) and the power of CSS, styled-components allows you to write actual CSS code to style your components… Styled-components is compatible with both React (for web) and React Native – meaning it’s the perfect choice even for truly universal apps!”

4. CSS Modules: Similar to importing regular stylesheets, but different in a significant way - scoping. CSS files are included the same way but with the following file extension format: filename.module.css. CSS written in this module will be scoped locally to the importing component. This can help avoid class name collisions in large applications.

5. SASS: Requires a package: npm install sass.

Sass: Sass is one of the most robust, stable, and powerful professional-grade CSS extension languages in the world.

style={} in React is similar to style="" in HTML

SASS (SASS and SCSS fall under the same category): is a way to put together CSS in a tree-like structure (parent child relationship)


Differences:
.sass 
    - No curly brackets, no semi-colons
    - Uses indentation

.scss
    - Curly brackets + semi-colons
    - Uses {}